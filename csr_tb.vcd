$date
	Tue Sep  9 13:57:21 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module csr_tb $end
$var wire 1 ! pready $end
$var wire 1 " pslverr $end
$var wire 32 # prdata [31:0] $end
$var wire 1 $ enable_o $end
$var wire 1 % cmd_start $end
$var reg 1 & busy $end
$var reg 1 ' err $end
$var reg 12 ( paddr [11:0] $end
$var reg 1 ) pclk $end
$var reg 1 * penable $end
$var reg 1 + presetn $end
$var reg 1 , psel $end
$var reg 4 - pstrb [3:0] $end
$var reg 32 . pwdata [31:0] $end
$var reg 1 / pwrite $end
$var reg 32 0 rdata [31:0] $end
$scope module dut $end
$var wire 32 1 CLKDIV_WMASK [31:0] $end
$var wire 32 2 CMDCFG_WMASK [31:0] $end
$var wire 32 3 CMDDMY_WMASK [31:0] $end
$var wire 32 4 CMDOP_WMASK [31:0] $end
$var wire 32 5 CSCTRL_WMASK [31:0] $end
$var wire 32 6 CTRL_WMASK [31:0] $end
$var wire 32 7 DMACFG_WMASK [31:0] $end
$var wire 32 8 XIPCFG_WMASK [31:0] $end
$var wire 32 9 XIPCMD_WMASK [31:0] $end
$var wire 12 : a [11:0] $end
$var wire 1 ; access_phase $end
$var wire 1 < axi_err_i $end
$var wire 1 & busy_i $end
$var wire 32 = cmd_addr_o [31:0] $end
$var wire 1 > cmd_done_i $end
$var wire 1 ? cmd_done_set_i $end
$var wire 32 @ cmd_len_o [31:0] $end
$var wire 1 % cmd_start_o $end
$var wire 1 A cmd_trig_ok $end
$var wire 1 B cmd_trig_wr $end
$var wire 1 % cmd_trigger_clr_i $end
$var wire 32 C dma_addr_o [31:0] $end
$var wire 1 D dma_done_i $end
$var wire 1 E dma_done_set_i $end
$var wire 32 F dma_len_o [31:0] $end
$var wire 1 G err_set_i $end
$var wire 32 H fifo_rx_data_i [31:0] $end
$var wire 1 I fifo_rx_full_set_i $end
$var wire 1 J fifo_rx_re_o $end
$var wire 32 K fifo_tx_data_o [31:0] $end
$var wire 1 L fifo_tx_empty_set_i $end
$var wire 1 M fifo_tx_we_o $end
$var wire 1 N overrun_i $end
$var wire 12 O paddr [11:0] $end
$var wire 1 ) pclk $end
$var wire 1 * penable $end
$var wire 1 ! pready $end
$var wire 1 + presetn $end
$var wire 1 , psel $end
$var wire 4 P pstrb [3:0] $end
$var wire 4 Q pstrb_eff [3:0] $end
$var wire 32 R pwdata [31:0] $end
$var wire 1 / pwrite $end
$var wire 1 S read_phase $end
$var wire 1 T rx_full_i $end
$var wire 4 U rx_level_i [3:0] $end
$var wire 1 V setup_phase $end
$var wire 1 W timeout_i $end
$var wire 1 X tx_empty_i $end
$var wire 4 Y tx_level_i [3:0] $end
$var wire 1 Z underrun_i $end
$var wire 1 [ wp_en_o $end
$var wire 1 \ wr_ok $end
$var wire 1 ] write_phase $end
$var wire 1 ^ xip_active_i $end
$var wire 8 _ xip_write_op_o [7:0] $end
$var wire 1 ` xip_write_en_o $end
$var wire 8 a xip_read_op_o [7:0] $end
$var wire 1 b xip_mode_en_o $end
$var wire 8 c xip_mode_bits_o [7:0] $end
$var wire 1 d xip_en_o $end
$var wire 4 e xip_dummy_cycles_o [3:0] $end
$var wire 2 f xip_data_lanes_o [1:0] $end
$var wire 1 g xip_cont_read_o $end
$var wire 2 h xip_addr_bytes_o [1:0] $end
$var wire 1 i quad_en_o $end
$var wire 8 j opcode_o [7:0] $end
$var wire 1 k mode_en_cfg_o $end
$var wire 8 l mode_bits_o [7:0] $end
$var wire 1 m lsb_first_o $end
$var wire 1 n is_write_o $end
$var wire 1 o irq $end
$var wire 5 p int_en_o [4:0] $end
$var wire 1 q incr_addr_o $end
$var wire 1 r hold_en_o $end
$var wire 8 s extra_dummy_o [7:0] $end
$var wire 1 $ enable_o $end
$var wire 4 t dummy_cycles_o [3:0] $end
$var wire 1 u dma_en_o $end
$var wire 1 v dma_dir_o $end
$var wire 2 w data_lanes_o [1:0] $end
$var wire 1 x ctrl_xip_n $end
$var wire 1 y ctrl_enable_n $end
$var wire 2 z cs_level_o [1:0] $end
$var wire 2 { cs_delay_o [1:0] $end
$var wire 1 | cs_auto_o $end
$var wire 1 } cpol_o $end
$var wire 1 ~ cpha_o $end
$var wire 2 !" cmd_lanes_o [1:0] $end
$var wire 3 "" clk_div_o [2:0] $end
$var wire 4 #" burst_size_o [3:0] $end
$var wire 2 $" addr_lanes_o [1:0] $end
$var wire 2 %" addr_bytes_o [1:0] $end
$var reg 32 &" clk_div_reg [31:0] $end
$var reg 32 '" cmd_addr_reg [31:0] $end
$var reg 32 (" cmd_cfg_reg [31:0] $end
$var reg 1 )" cmd_done_latched $end
$var reg 32 *" cmd_dummy_reg [31:0] $end
$var reg 32 +" cmd_len_reg [31:0] $end
$var reg 32 ," cmd_op_reg [31:0] $end
$var reg 1 -" cmd_trig_q $end
$var reg 32 ." cs_ctrl_reg [31:0] $end
$var reg 32 /" ctrl_reg [31:0] $end
$var reg 32 0" dma_addr_reg [31:0] $end
$var reg 32 1" dma_cfg_reg [31:0] $end
$var reg 1 2" dma_done_latched $end
$var reg 32 3" dma_len_reg [31:0] $end
$var reg 32 4" err_stat_reg [31:0] $end
$var reg 32 5" fifo_rx_data_q [31:0] $end
$var reg 1 6" fifo_rx_pop_seen $end
$var reg 1 7" fifo_rx_re_q $end
$var reg 32 8" int_en_reg [31:0] $end
$var reg 32 9" int_stat_reg [31:0] $end
$var reg 32 :" prdata [31:0] $end
$var reg 1 " pslverr $end
$var reg 1 ;" ro_addr $end
$var reg 1 <" valid_addr $end
$var reg 32 =" xip_cfg_reg [31:0] $end
$var reg 32 >" xip_cmd_reg [31:0] $end
$scope function apply_strb $end
$var reg 32 ?" cur [31:0] $end
$var reg 32 @" data [31:0] $end
$upscope $end
$scope begin $unm_blk_37 $end
$var reg 32 A" next_ctrl [31:0] $end
$upscope $end
$upscope $end
$scope task apb_read $end
$var reg 12 B" addr [11:0] $end
$var reg 32 C" data [31:0] $end
$upscope $end
$scope task apb_write $end
$var reg 12 D" addr [11:0] $end
$var reg 32 E" data [31:0] $end
$var reg 1 F" err $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
xF"
bx E"
bx D"
bx C"
bx B"
bx A"
bx @"
bx ?"
b1011 >"
b10000001 ="
1<"
1;"
b0 :"
b0 9"
b0 8"
07"
06"
b0 5"
b0 4"
b0 3"
02"
b0 1"
b0 0"
b0 /"
b1 ."
0-"
b0 ,"
b0 +"
b0 *"
0)"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
b0 ""
b0 !"
0~
0}
1|
b0 {
b0 z
0y
0x
b0 w
0v
0u
b0 t
b0 s
0r
0q
b0 p
0o
0n
0m
b0 l
0k
b0 j
0i
b1 h
0g
b0 f
b1000 e
0d
b0 c
0b
b1011 a
0`
b0 _
0^
0]
0\
0[
0Z
b0 Y
1X
0W
0V
b0 U
0T
0S
b0 R
b1111 Q
b1111 P
b0 O
0N
0M
0L
b0 K
0J
0I
b0 H
0G
b0 F
0E
0D
b0 C
0B
0A
b0 @
0?
0>
b0 =
0<
0;
b0 :
b111111111111111111111111 9
b11111111111111 8
b111111 7
b1001111111 6
b11111 5
b1111111111111111 4
b11111111 3
b11111111111111 2
b1111 1
bx 0
0/
b0 .
b1111 -
0,
0+
0*
0)
b0 (
x'
0&
0%
0$
b0 #
0"
1!
$end
#5000
1)
#10000
0)
#15000
1)
#20000
0)
b0 B"
1+
#25000
1V
1,
1)
#30000
0)
#35000
b11010000000000001000010000001 #
b11010000000000001000010000001 :"
0V
1S
1;
1*
1)
#40000
0)
#45000
b0 #
b0 :"
0S
0;
0*
0,
b1 E"
b100 D"
b11010000000000001000010000001 0
b11010000000000001000010000001 C"
1)
#50000
0)
#55000
0;"
1<"
1V
b1 K
b1 .
b1 R
b100 :
b100 (
b100 O
1/
1,
1)
#60000
0)
#65000
1y
1\
0V
1]
1;
1*
1)
#70000
0)
#75000
0\
1$
1;"
1<"
0]
0;
b1 /"
b0 K
b0 .
b0 R
b0 :
b0 (
b0 O
0/
0*
0,
b1 A"
b0 ?"
b1 @"
0'
0F"
1)
#80000
0)
#85000
b100000001 E"
1)
#90000
0)
#95000
0;"
1<"
1V
b100000001 K
b100000001 .
b100000001 R
b100 :
b100 (
b100 O
1/
1,
1)
#100000
0)
#105000
1A
1B
1\
0V
1]
1;
1*
1)
#110000
0)
#115000
0A
0\
0B
1;"
1<"
0]
0;
1%
1-"
b0 K
b0 .
b0 R
b0 :
b0 (
b0 O
0/
0*
0,
b1 A"
b1 ?"
b100000001 @"
1)
#120000
0)
#125000
0%
0-"
1&
1)
#130000
0)
#135000
0;"
1<"
1V
b100000001 K
b100000001 .
b100000001 R
b100 :
b100 (
b100 O
1/
1,
1)
#140000
0)
#145000
1B
1\
1"
0V
1]
1;
1*
1)
#150000
0)
#155000
0\
0B
1;"
1<"
0]
0;
b0 K
b0 .
b0 R
b0 :
b0 (
b0 O
0/
0*
0,
0A
0"
b1 A"
b11 E"
0&
1'
1F"
1)
#160000
0)
#165000
0;"
1<"
1V
b11 K
b11 .
b11 R
b100 :
b100 (
b100 O
1/
1,
1)
#170000
0)
#175000
1x
1\
0V
1]
1;
1*
1)
#180000
0)
#185000
0\
1d
1;"
1<"
0]
0;
b11 /"
b0 K
b0 .
b0 R
b0 :
b0 (
b0 O
0/
0*
0,
b11 A"
b11 @"
0'
0F"
1)
#190000
0)
#195000
b100000011 E"
1)
#200000
0)
#205000
0;"
1<"
1V
b100000011 K
b100000011 .
b100000011 R
b100 :
b100 (
b100 O
1/
1,
1)
#210000
0)
#215000
1B
1\
0V
1]
1;
1*
1)
#220000
0)
#225000
0\
0B
1;"
1<"
0]
0;
b0 K
b0 .
b0 R
b0 :
b0 (
b0 O
0/
0*
0,
b11 A"
b11 ?"
b100000011 @"
1)
#230000
0)
#235000
b0 E"
b0 D"
1)
#240000
0)
#245000
1V
1/
1,
1)
#250000
0)
#255000
1"
0V
1]
1;
1*
1)
#260000
0)
#265000
0"
0]
0;
0/
0*
0,
1'
1F"
1)
